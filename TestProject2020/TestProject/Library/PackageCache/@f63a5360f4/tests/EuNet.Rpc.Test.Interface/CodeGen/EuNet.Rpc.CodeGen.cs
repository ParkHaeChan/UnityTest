// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EuNet.CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using EuNet.Core;
using EuNet.Rpc;
#if UNITY_EDITOR || UNITY_STANDALONE || UNITY_ANDROID || UNITY_IOS
using EuNet.Unity;
using UnityEngine;
#endif

#region Rpc.Test.Interface.IGreeterRpc

namespace Rpc.Test.Interface
{
    public interface IGreeterRpc_NoReply
    {
        void Greet(string name);
        void GreetClass(Rpc.Test.Interface.DataClass dataClass);
        void GreetDictionary(System.Collections.Generic.Dictionary<string, string> value);
        void GreetEnum(Rpc.Test.Interface.DataEnum dataEnum);
        void GreetEnumOther(System.Net.Sockets.SocketFlags flags);
        void GreetEnumReturn();
        void GreetInterfaceSerializeClass(Rpc.Test.Interface.InterfaceSerializeClass dataClass);
        void GreetTuple(System.Tuple<string, string> value);
        void SessionParameter(EuNet.Core.ISession session);
    }

    public enum IGreeterRpc_Enum : int
    {
        Greet = -567773818,
        GreetClass = -1772909904,
        GreetDictionary = -942699280,
        GreetEnum = -2136207631,
        GreetEnumOther = -1598481937,
        GreetEnumReturn = -1310362511,
        GreetInterfaceSerializeClass = -258043401,
        GreetTuple = -1793410084,
        SessionParameter = -1629016744,
    }

    public class GreeterRpc : RpcRequester, IGreeterRpc, IGreeterRpc_NoReply
    {
        public override Type InterfaceType => typeof(IGreeterRpc);

        public GreeterRpc() : base(null)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public GreeterRpc(ISession target) : base(target)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public GreeterRpc(ISession target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
            DeliveryMethod = DeliveryMethod.Tcp;
        }

        public IGreeterRpc_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterRpc WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterRpc(Target, requestWaiter, Timeout);
        }

        public GreeterRpc WithTimeout(TimeSpan? timeout)
        {
            return new GreeterRpc(Target, RequestWaiter, timeout);
        }

        public async Task<string> Greet(string name)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.Greet);
                _writer_.Write(name);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.ReadString();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<Rpc.Test.Interface.DataClass> GreetClass(Rpc.Test.Interface.DataClass dataClass)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetClass);
                NetDataSerializer.Serialize<Rpc.Test.Interface.DataClass>(_writer_, dataClass);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return NetDataSerializer.Deserialize<Rpc.Test.Interface.DataClass>(_reader_);
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<System.Collections.Generic.Dictionary<int, int>> GreetDictionary(System.Collections.Generic.Dictionary<string, string> value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetDictionary);
                NetDataSerializer.Serialize<System.Collections.Generic.Dictionary<string, string>>(_writer_, value);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return NetDataSerializer.Deserialize<System.Collections.Generic.Dictionary<int, int>>(_reader_);
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task GreetEnum(Rpc.Test.Interface.DataEnum dataEnum)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnum);
                NetDataSerializer.Serialize<Rpc.Test.Interface.DataEnum>(_writer_, dataEnum);
                await SendRequestAndWait(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task GreetEnumOther(System.Net.Sockets.SocketFlags flags)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnumOther);
                NetDataSerializer.Serialize<System.Net.Sockets.SocketFlags>(_writer_, flags);
                await SendRequestAndWait(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<Rpc.Test.Interface.DataEnumForReturn> GreetEnumReturn()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnumReturn);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return NetDataSerializer.Deserialize<Rpc.Test.Interface.DataEnumForReturn>(_reader_);
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<Rpc.Test.Interface.InterfaceSerializeClass> GreetInterfaceSerializeClass(Rpc.Test.Interface.InterfaceSerializeClass dataClass)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetInterfaceSerializeClass);
                _writer_.Write<Rpc.Test.Interface.InterfaceSerializeClass>(dataClass);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.Read<Rpc.Test.Interface.InterfaceSerializeClass>();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<System.Tuple<int, System.Net.Sockets.SocketFlags>> GreetTuple(System.Tuple<string, string> value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetTuple);
                NetDataSerializer.Serialize<System.Tuple<string, string>>(_writer_, value);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return NetDataSerializer.Deserialize<System.Tuple<int, System.Net.Sockets.SocketFlags>>(_reader_);
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<string> SessionParameter(EuNet.Core.ISession session)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.SessionParameter);
                
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.ReadString();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.Greet(string name)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.Greet);
                _writer_.Write(name);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetClass(Rpc.Test.Interface.DataClass dataClass)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetClass);
                NetDataSerializer.Serialize<Rpc.Test.Interface.DataClass>(_writer_, dataClass);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetDictionary(System.Collections.Generic.Dictionary<string, string> value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetDictionary);
                NetDataSerializer.Serialize<System.Collections.Generic.Dictionary<string, string>>(_writer_, value);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetEnum(Rpc.Test.Interface.DataEnum dataEnum)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnum);
                NetDataSerializer.Serialize<Rpc.Test.Interface.DataEnum>(_writer_, dataEnum);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetEnumOther(System.Net.Sockets.SocketFlags flags)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnumOther);
                NetDataSerializer.Serialize<System.Net.Sockets.SocketFlags>(_writer_, flags);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetEnumReturn()
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetEnumReturn);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetInterfaceSerializeClass(Rpc.Test.Interface.InterfaceSerializeClass dataClass)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetInterfaceSerializeClass);
                _writer_.Write<Rpc.Test.Interface.InterfaceSerializeClass>(dataClass);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.GreetTuple(System.Tuple<string, string> value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.GreetTuple);
                NetDataSerializer.Serialize<System.Tuple<string, string>>(_writer_, value);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterRpc_NoReply.SessionParameter(EuNet.Core.ISession session)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterRpc_Enum.SessionParameter);
                
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }
    }

    public abstract class GreeterRpcServiceAbstract : IRpcInvokable, IGreeterRpc
    {
        public abstract Task<string> Greet(string name);
        public abstract Task<Rpc.Test.Interface.DataClass> GreetClass(Rpc.Test.Interface.DataClass dataClass);
        public abstract Task<System.Collections.Generic.Dictionary<int, int>> GreetDictionary(System.Collections.Generic.Dictionary<string, string> value);
        public abstract Task GreetEnum(Rpc.Test.Interface.DataEnum dataEnum);
        public abstract Task GreetEnumOther(System.Net.Sockets.SocketFlags flags);
        public abstract Task<Rpc.Test.Interface.DataEnumForReturn> GreetEnumReturn();
        public abstract Task<Rpc.Test.Interface.InterfaceSerializeClass> GreetInterfaceSerializeClass(Rpc.Test.Interface.InterfaceSerializeClass dataClass);
        public abstract Task<System.Tuple<int, System.Net.Sockets.SocketFlags>> GreetTuple(System.Tuple<string, string> value);
        public abstract Task<string> SessionParameter(EuNet.Core.ISession session);
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (IGreeterRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IGreeterRpc_Enum.Greet:
                    {
                        var name = _reader_.ReadString();
                        var _result_ = await Greet(name);
                        _writer_.Write(_result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetClass:
                    {
                        var dataClass = NetDataSerializer.Deserialize<Rpc.Test.Interface.DataClass>(_reader_);
                        var _result_ = await GreetClass(dataClass);
                        NetDataSerializer.Serialize<Rpc.Test.Interface.DataClass>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetDictionary:
                    {
                        var value = NetDataSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(_reader_);
                        var _result_ = await GreetDictionary(value);
                        NetDataSerializer.Serialize<System.Collections.Generic.Dictionary<int, int>>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnum:
                    {
                        var dataEnum = NetDataSerializer.Deserialize<Rpc.Test.Interface.DataEnum>(_reader_);
                        await GreetEnum(dataEnum);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnumOther:
                    {
                        var flags = NetDataSerializer.Deserialize<System.Net.Sockets.SocketFlags>(_reader_);
                        await GreetEnumOther(flags);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnumReturn:
                    {
                        var _result_ = await GreetEnumReturn();
                        NetDataSerializer.Serialize<Rpc.Test.Interface.DataEnumForReturn>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetInterfaceSerializeClass:
                    {
                        var dataClass = _reader_.Read<Rpc.Test.Interface.InterfaceSerializeClass>();
                        var _result_ = await GreetInterfaceSerializeClass(dataClass);
                        _writer_.Write<Rpc.Test.Interface.InterfaceSerializeClass>(_result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetTuple:
                    {
                        var value = NetDataSerializer.Deserialize<System.Tuple<string, string>>(_reader_);
                        var _result_ = await GreetTuple(value);
                        NetDataSerializer.Serialize<System.Tuple<int, System.Net.Sockets.SocketFlags>>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.SessionParameter:
                    {
                        
                        var _result_ = await SessionParameter(session);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }

    public class GreeterRpcServiceSession : IRpcInvokable
    {
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (IGreeterRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IGreeterRpc_Enum.Greet:
                    {
                        var name = _reader_.ReadString();
                        var _result_ = await (session as IGreeterRpc).Greet(name);
                        _writer_.Write(_result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetClass:
                    {
                        var dataClass = NetDataSerializer.Deserialize<Rpc.Test.Interface.DataClass>(_reader_);
                        var _result_ = await (session as IGreeterRpc).GreetClass(dataClass);
                        NetDataSerializer.Serialize<Rpc.Test.Interface.DataClass>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetDictionary:
                    {
                        var value = NetDataSerializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(_reader_);
                        var _result_ = await (session as IGreeterRpc).GreetDictionary(value);
                        NetDataSerializer.Serialize<System.Collections.Generic.Dictionary<int, int>>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnum:
                    {
                        var dataEnum = NetDataSerializer.Deserialize<Rpc.Test.Interface.DataEnum>(_reader_);
                        await (session as IGreeterRpc).GreetEnum(dataEnum);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnumOther:
                    {
                        var flags = NetDataSerializer.Deserialize<System.Net.Sockets.SocketFlags>(_reader_);
                        await (session as IGreeterRpc).GreetEnumOther(flags);
                    }
                    break;
                case IGreeterRpc_Enum.GreetEnumReturn:
                    {
                        var _result_ = await (session as IGreeterRpc).GreetEnumReturn();
                        NetDataSerializer.Serialize<Rpc.Test.Interface.DataEnumForReturn>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetInterfaceSerializeClass:
                    {
                        var dataClass = _reader_.Read<Rpc.Test.Interface.InterfaceSerializeClass>();
                        var _result_ = await (session as IGreeterRpc).GreetInterfaceSerializeClass(dataClass);
                        _writer_.Write<Rpc.Test.Interface.InterfaceSerializeClass>(_result_);
                    }
                    break;
                case IGreeterRpc_Enum.GreetTuple:
                    {
                        var value = NetDataSerializer.Deserialize<System.Tuple<string, string>>(_reader_);
                        var _result_ = await (session as IGreeterRpc).GreetTuple(value);
                        NetDataSerializer.Serialize<System.Tuple<int, System.Net.Sockets.SocketFlags>>(_writer_, _result_);
                    }
                    break;
                case IGreeterRpc_Enum.SessionParameter:
                    {
                        
                        var _result_ = await (session as IGreeterRpc).SessionParameter(session);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }
}

#endregion
#region EuNet.Rpc.Test.Interface.IGreeterViewRpc
#if UNITY_EDITOR || UNITY_STANDALONE || UNITY_ANDROID || UNITY_IOS

namespace EuNet.Rpc.Test.Interface
{
    public interface IGreeterViewRpc_NoReply
    {
        void Greet(int value);
        void UnityType(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
    }

    public enum IGreeterViewRpc_Enum : int
    {
        Greet = -1153730677,
        UnityType = -826639833,
    }

    public class GreeterViewRpc : RpcRequester, IGreeterViewRpc, IGreeterViewRpc_NoReply
    {
        public override Type InterfaceType => typeof(IGreeterViewRpc);

        public GreeterViewRpc(NetView view, TimeSpan? timeout = null)
            	: base(NetClientGlobal.Instance.Client, new NetViewRequestWaiter(view), timeout)
        {
            DeliveryMethod = DeliveryMethod.Unreliable;
            DeliveryTarget = DeliveryTarget.Others;
        }

        public GreeterViewRpc(ISession target, IRequestWaiter requestWaiter, TimeSpan? timeout = null) : base(target, requestWaiter, timeout)
        {
            DeliveryMethod = DeliveryMethod.Unreliable;
            DeliveryTarget = DeliveryTarget.Others;
        }

        public GreeterViewRpc ToTarget(DeliveryMethod deliveryMethod, ushort sessionId)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Target;
            Extra = sessionId;
            return this;
        }

        public GreeterViewRpc ToMaster(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Master;
            return this;
        }

        public IGreeterViewRpc_NoReply ToOthers(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.Others;
            return this;
        }

        public IGreeterViewRpc_NoReply ToAll(DeliveryMethod deliveryMethod)
        {
            DeliveryMethod = deliveryMethod;
            DeliveryTarget = DeliveryTarget.All;
            return this;
        }

        public IGreeterViewRpc_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterViewRpc WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterViewRpc(Target, requestWaiter, Timeout);
        }

        public GreeterViewRpc WithTimeout(TimeSpan? timeout)
        {
            return new GreeterViewRpc(Target, RequestWaiter, timeout);
        }

        public async Task<bool> Greet(int value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterViewRpc_Enum.Greet);
                _writer_.Write(value);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.ReadBoolean();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        public async Task<UnityEngine.Color> UnityType(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterViewRpc_Enum.UnityType);
                _writer_.Write(position);
                _writer_.Write(rotation);
                using(var _reader_ = await SendRequestAndReceive(_writer_))
                {
                    return _reader_.ReadColor();
                }
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterViewRpc_NoReply.Greet(int value)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterViewRpc_Enum.Greet);
                _writer_.Write(value);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }

        void IGreeterViewRpc_NoReply.UnityType(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
        {
            var _writer_ = NetPool.DataWriterPool.Alloc();
            try
            {
                _writer_.Write((int)IGreeterViewRpc_Enum.UnityType);
                _writer_.Write(position);
                _writer_.Write(rotation);
                SendRequest(_writer_);
            }
            finally
            {
                NetPool.DataWriterPool.Free(_writer_);
            }
        }
    }

    [RequireComponent(typeof(NetView))]
    public abstract class GreeterViewRpcServiceBehaviour : MonoBehaviour, IRpcInvokable, IGreeterViewRpc
    {
        public abstract Task<bool> Greet(int value);
        public abstract Task<UnityEngine.Color> UnityType(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            ISession session = _target_ as ISession;
            var typeEnum = (IGreeterViewRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IGreeterViewRpc_Enum.Greet:
                    {
                        var value = _reader_.ReadInt32();
                        var _result_ = await Greet(value);
                        _writer_.Write(_result_);
                    }
                    break;
                case IGreeterViewRpc_Enum.UnityType:
                    {
                        var position = _reader_.ReadVector3();
                        var rotation = _reader_.ReadQuaternion();
                        var _result_ = await UnityType(position, rotation);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }

    public class GreeterViewRpcServiceView : IRpcInvokable
    {
        public async Task<bool> Invoke(object _target_, NetDataReader _reader_, NetDataWriter _writer_)
        {
            NetView _view_ = _target_ as NetView;
            var typeEnum = (IGreeterViewRpc_Enum)_reader_.ReadInt32();
            switch(typeEnum)
            {
                case IGreeterViewRpc_Enum.Greet:
                    {
                        var value = _reader_.ReadInt32();
                        var _result_ = await _view_.FindRpcHandler<IGreeterViewRpc>().Greet(value);
                        _writer_.Write(_result_);
                    }
                    break;
                case IGreeterViewRpc_Enum.UnityType:
                    {
                        var position = _reader_.ReadVector3();
                        var rotation = _reader_.ReadQuaternion();
                        var _result_ = await _view_.FindRpcHandler<IGreeterViewRpc>().UnityType(position, rotation);
                        _writer_.Write(_result_);
                    }
                    break;
                default: return false;
            }

            return true;
        }
    }
}

#endif
#endregion
#region EuNet.Rpc.Test.Interface

namespace EuNet.Rpc.Test.Interface
{
    public static class RpcEnumHelper
    {
        public static string GetEnumName(int rpcNameHash)
        {
            switch(rpcNameHash)
            {
                case -567773818: return "IGreeterRpc.Greet";
                case -1772909904: return "IGreeterRpc.GreetClass";
                case -942699280: return "IGreeterRpc.GreetDictionary";
                case -2136207631: return "IGreeterRpc.GreetEnum";
                case -1598481937: return "IGreeterRpc.GreetEnumOther";
                case -1310362511: return "IGreeterRpc.GreetEnumReturn";
                case -258043401: return "IGreeterRpc.GreetInterfaceSerializeClass";
                case -1793410084: return "IGreeterRpc.GreetTuple";
                case -1629016744: return "IGreeterRpc.SessionParameter";
                case -1153730677: return "IGreeterViewRpc.Greet";
                case -826639833: return "IGreeterViewRpc.UnityType";
            }

            return string.Empty;
        }
    }
}

#endregion
#region AOT

namespace AOT
{
    public sealed class AotCodeEuNetRpcTestInterface
    {
        private void UsedOnlyForAOTCodeGeneration()
        {
            new GenericEnumFormatter<Rpc.Test.Interface.DataEnum>();
            new GenericEnumFormatter<System.Net.Sockets.SocketFlags>();
            new GenericEnumFormatter<Rpc.Test.Interface.DataEnumForReturn>();
            new TupleFormatter<int, System.Net.Sockets.SocketFlags>();
            new TupleFormatter<string, string>();
            new DictionaryFormatter<int, int>();
            new DictionaryFormatter<string, string>();
            
            throw new InvalidOperationException("This method is used for AOT code generation only.Do not call it at runtime.");
        }
    }
}

#endregion
#region Rpc.Test.Interface.DataClass

namespace Rpc.Test.Interface
{
    public sealed class DataClassFormatter : INetDataFormatter<DataClass>
    {
        public static readonly DataClassFormatter Instance = new DataClassFormatter();

        public void Serialize(NetDataWriter _writer_, DataClass _value_, NetDataSerializerOptions options)
        {
            _writer_.Write(_value_.String);
            _writer_.Write(_value_.Property);
            _writer_.Write(_value_.Int);
        }

        public DataClass Deserialize(NetDataReader _reader_, NetDataSerializerOptions options)
        {
            var __String = _reader_.ReadString();
            var __Property = _reader_.ReadInt32();
            var __Int = _reader_.ReadInt32();

            return new DataClass() {
                String = __String,
                Property = __Property,
                Int = __Int,
            };
        }
    }
}

#endregion
#region Rpc.Test.Interface.DataStruct

namespace Rpc.Test.Interface
{
    public sealed class DataStructFormatter : INetDataFormatter<DataStruct>
    {
        public static readonly DataStructFormatter Instance = new DataStructFormatter();

        public void Serialize(NetDataWriter _writer_, DataStruct _value_, NetDataSerializerOptions options)
        {
            _writer_.Write(_value_.String);
            _writer_.Write(_value_.Property);
            _writer_.Write(_value_.Int);
        }

        public DataStruct Deserialize(NetDataReader _reader_, NetDataSerializerOptions options)
        {
            var __String = _reader_.ReadString();
            var __Property = _reader_.ReadInt32();
            var __Int = _reader_.ReadInt32();

            return new DataStruct() {
                String = __String,
                Property = __Property,
                Int = __Int,
            };
        }
    }
}

#endregion
#region Rpc.Test.Interface.GenericDataClass<T>

namespace Rpc.Test.Interface
{
    public sealed class GenericDataClassFormatter<T> : INetDataFormatter<GenericDataClass<T>>
    {
        public void Serialize(NetDataWriter _writer_, GenericDataClass<T> _value_, NetDataSerializerOptions options)
        {
            NetDataSerializer.Serialize<T>(_writer_, _value_.GenericValue);
        }

        public GenericDataClass<T> Deserialize(NetDataReader _reader_, NetDataSerializerOptions options)
        {
            var __GenericValue = NetDataSerializer.Deserialize<T>(_reader_);

            return new GenericDataClass<T>() {
                GenericValue = __GenericValue,
            };
        }
    }
}

#endregion
#region Rpc.Test.Interface.GenericDataStruct<T>

namespace Rpc.Test.Interface
{
    public sealed class GenericDataStructFormatter<T> : INetDataFormatter<GenericDataStruct<T>>
    {
        public void Serialize(NetDataWriter _writer_, GenericDataStruct<T> _value_, NetDataSerializerOptions options)
        {
            NetDataSerializer.Serialize<T>(_writer_, _value_.GenericValue);
        }

        public GenericDataStruct<T> Deserialize(NetDataReader _reader_, NetDataSerializerOptions options)
        {
            var __GenericValue = NetDataSerializer.Deserialize<T>(_reader_);

            return new GenericDataStruct<T>() {
                GenericValue = __GenericValue,
            };
        }
    }
}

#endregion
#region EuNetRpcTestInterfaceResolvers

namespace EuNetRpcTestInterfaceResolvers
{
    public sealed class GeneratedResolver : INetDataFormatterResolver
    {
        public static readonly GeneratedResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public INetDataFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            public static readonly INetDataFormatter<T> Formatter;

            static FormatterCache()
            {
                Formatter = (INetDataFormatter<T>)GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly Dictionary<Type, object> FormatterMap = new Dictionary<Type, object>() {
            { typeof(Rpc.Test.Interface.DataClass) , Rpc.Test.Interface.DataClassFormatter.Instance },
            { typeof(Rpc.Test.Interface.DataStruct) , Rpc.Test.Interface.DataStructFormatter.Instance },
            { typeof(Rpc.Test.Interface.GenericDataClass<>) , typeof(Rpc.Test.Interface.GenericDataClassFormatter<>) },
            { typeof(Rpc.Test.Interface.GenericDataStruct<>) , typeof(Rpc.Test.Interface.GenericDataStructFormatter<>) },
        };
        internal static object GetFormatter(Type t)
        {
            TypeInfo ti = t.GetTypeInfo();
            if (ti.IsGenericType)
            {
                Type genericType = ti.GetGenericTypeDefinition();
                object formatterType;
                if (FormatterMap.TryGetValue(genericType, out formatterType))
                {
                    return Activator.CreateInstance(((Type)formatterType).MakeGenericType(ti.GenericTypeArguments));
                }
            }

            else
            {
                object formatter;
                if (FormatterMap.TryGetValue(t, out formatter))
                {
                    return formatter;
                }
            }

            return null;
        }
    }
}

#endregion
